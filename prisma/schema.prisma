// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// table users
model users {
  id                 Int             @id @default(autoincrement())
  email              String          @unique
  phone              String?         @unique
  password           String?
  profileId          Int?            @map("profile_id")
  role               roles           @default(user)
  validasi           String?         @map("validasi")
  resetPasswordToken String?         @map("reset_password_token")
  isActive           Boolean         @map("is_active")
  createdAt          DateTime        @default(now()) @map("create_at")
  updatedAt          DateTime        @updatedAt @map("updated_at")
  profiles           profiles?       @relation(fields: [profileId], references: [id])
  myCourse           myCourse[]
  reviews            reviews[]
  notifications      notifications[]

  @@map("users")
}

model profiles {
  id        Int      @id @default(autoincrement())
  name      String
  image     String?
  country   String?
  city      String?
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     users[]

  @@map("profiles")
}

model courses {
  id          Int        @id @default(autoincrement())
  categoryId  Int
  title       String
  author      String
  telegram    String
  description String
  price       Int
  image       String
  prepare     String
  level       level      @default(beginer)
  available   Boolean    @default(true)
  createdAt   DateTime   @default(now()) @map("create_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  categories  categories @relation(fields: [categoryId], references: [id])
  goals       goals[]
  myCourse    myCourse[]
  reviews     reviews[]
  chapters    chapters[]

  @@map("courses")
}

model categories {
  id        Int       @id @default(autoincrement())
  name      String
  image     String
  available Boolean   @default(true)
  createdAt DateTime  @default(now()) @map("create_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  courses   courses[]

  @@map("categories")
}

model goals {
  id      Int     @id @default(autoincrement())
  name    String
  course  Int
  courses courses @relation(fields: [course], references: [id])

  @@map("goals")
}

model chapters {
  id        Int      @id @default(autoincrement())
  title     String
  duration  Int
  courseId  Int
  courses   courses  @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  sources sources[]

  @@map("chapters")
}

model sources {
  id        Int       @id @default(autoincrement())
  name      String
  link      String
  chapterId Int
  chapters  chapters  @relation(fields: [chapterId], references: [id])
  createdAt DateTime  @default(now()) @map("create_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  progres   progres[]

  @@map("sources")
}

model progres {
  id        Int      @id @default(autoincrement())
  sourceId  Int
  myCourse  Int      @map("my_course")
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  myCourses myCourse @relation(fields: [myCourse], references: [id])
  sources   sources  @relation(fields: [sourceId], references: [id])

  @@map("progres")
}

model myCourse {
  id        Int       @id @default(autoincrement())
  user      Int
  course    Int
  progress  progress  @default(inProgress)
  createdAt DateTime  @default(now()) @map("create_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  users     users     @relation(fields: [user], references: [id])
  courses   courses   @relation(fields: [course], references: [id])
  progres   progres[]
  orders    orders[]

  @@map("my_course")
}

model orders {
  id         Int      @id @default(autoincrement())
  status     status   @default(notPaid)
  myCourseId Int
  method     String   @default("credit Card")
  myCourse   myCourse @relation(fields: [myCourseId], references: [id])
  createdAt  DateTime @default(now()) @map("create_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@map("orders")
}

model reviews {
  id      Int     @id @default(autoincrement())
  rating  Int
  user    Int
  course  Int
  comment String
  users   users   @relation(fields: [user], references: [id])
  courses courses @relation(fields: [course], references: [id])

  @@map("reviews")
}

model notifications {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("create_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  users     users    @relation(fields: [userId], references: [id])

  @@map("notifications")
}

enum roles {
  admin
  user
}

enum type {
  free
  paid
}

enum level {
  beginer
  intermediate
  expert
}

enum progress {
  inProgress
  completed
}

enum status {
  paid
  notPaid
}
